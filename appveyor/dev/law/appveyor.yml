image:
  - Visual Studio 2019

environment:
  SLACK_WEBHOOK_TOKEN_FIRE:
    secure: KUaR+KAqX1jU0LF7kRDKHHGEAoItFzIHSjcreyRvnrT1vcX5+4iV77Ivysxl8jhh8ocUE0JCcmcKI0xPTb+M+EMfb8xk9L7+XCTdNubjU5w=
  matrix:
    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    - PYTHON: "C:\\Python310-x64"

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

# uncomment to RDP at end of build ...
on_finish:
  - ps: >-
      If ($env:DEBUG -eq $True) {
        $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
      };

init:
  # exit if secure variables are unset (saves time if fired by a non-team pull request)
  - ps: if ($env:GH_SSH_PRIVATE_KEY -eq $null) { exit }

  - git config --global user.name oll-bot
  - git config --global user.email developers@openlawlib.org

install:
  # upgrade pip
  - "%PYTHON%\\python.exe -m pip install --upgrade pip"

  # the only way we can use the deploy key is by putting it in an environment variable (see above)
  # and then using PowerShell (ps) to copy the environment variable into a file (see below)
  # begin/end key lines should be in the environment variable
  - ps: $key = "-----BEGIN OPENSSH PRIVATE KEY-----`n"
  - ps: $key += $env:GH_SSH_PRIVATE_KEY.Replace(" ", "`n")
  - ps: $key += "`n-----END OPENSSH PRIVATE KEY-----`n"
  - ps: Set-Content c:\users\appveyor\.ssh\id_rsa $key
  - ps: $fileContent = "-----BEGIN RSA PRIVATE KEY-----`n"
  - ps: $fileContent += $env:snapshot_key.Replace(" ", "`n")
  - ps: $fileContent += "`n-----END RSA PRIVATE KEY-----`n"
  - ps: Set-Content c:\users\appveyor\snapshot $fileContent
  - ps: $fileContent = "-----BEGIN RSA PRIVATE KEY-----`n"
  - ps: $fileContent += $env:timestamp_key.Replace(" ", "`n")
  - ps: $fileContent += "`n-----END RSA PRIVATE KEY-----`n"
  - ps: Set-Content c:\users\appveyor\timestamp $fileContent

before_build:
  - ps: $REQUIREMENTS_CONTENT = Get-Content .\requirements.txt -Raw;
  - ps: $CONTENT_ARRAY = $REQUIREMENTS_CONTENT -split "# ";
  - ps: >-
      If ($env:TAF_BRANCH) {
        git clone -q git@github.com:openlawlibrary/taf.git ..\wheels\taf
        git -C ..\wheels\taf checkout -q $env:TAF_BRANCH
        $env:TAF_WHEEL = "-e ..\wheels\taf"
      } else {
        $env:TAF_WHEEL = "taf"
      };

      If ($env:PLATFORM_BRANCH) {
        git clone -q git@github.com:openlawlibrary/platform.git ..\wheels\platform
        git -C ..\wheels\platform checkout -q $env:PLATFORM_BRANCH
        $env:CORE_WHEEL = "-e ..\wheels\platform\core"
        
        If($env:PARTNER -eq 'OLL_PARTNERS_US_DC') {
          $env:PARTNERS_WHEEL = "-e ..\wheels\platform\partners-us-dc"
        } else {  
          $env:PARTNERS_WHEEL = "-e ..\wheels\platform\partners"
        };
      } else {
        $env:CORE_WHEEL = "--pre oll-core"
        If($CONTENT_ARRAY[0] -match "~=") {
          $VERSION = $CONTENT_ARRAY[0] -split "~="
          $env:CORE_WHEEL += "~=" + $VERSION[1]
        };
        $env:PARTNERS_WHEEL = "--pre " + $CONTENT_ARRAY[0]
      };

  - "%PYTHON%\\python.exe -m pip -q install wheel"
  - "%PYTHON%\\python.exe -m pip -q install %TAF_WHEEL%"
  - "%PYTHON%\\python.exe -m pip -q install %CORE_WHEEL%"
  - "%PYTHON%\\python.exe -m pip -q install %PARTNERS_WHEEL%"
  - "%PYTHON%\\python.exe -m pip list"

  - "%PYTHON%\\python.exe  -m oll.tools.cli ci clone-repos-from-auth .. ../%APPVEYOR_PROJECT_SLUG% "

  - git -C ..\%APPVEYOR_PROJECT_SLUG% remote set-url origin git@github.com:%APPVEYOR_REPO_NAME%.git

  - "%PYTHON%\\python.exe -m pip -q install wheel"
  - "%PYTHON%\\python.exe -m pip -q install -r requirements.txt"

build_script:
  - ps: $env:FLAG = if ($env:APPVEYOR_PULL_REQUEST_NUMBER -eq $null) { "--deploy" }

  # merge commits of update or speculative branches
  - "%PYTHON%\\python.exe  -m oll.tools.cli ci merge-commits --library-root .. --auth ../%APPVEYOR_PROJECT_SLUG% %FLAG%"

  # update timestamp and/or snapshot metadata files if about to expire
  # if previous command merges something to master, this command won't update anything
  - "%PYTHON%\\python.exe -m oll.tools.cli ci update-timestamp-and-snapshot --auth ../%APPVEYOR_PROJECT_SLUG% %FLAG%"
  - "%PYTHON%\\python.exe -m oll.tools.cli ci check-if-roles-expired --auth ../%APPVEYOR_PROJECT_SLUG% --interval 10"

notifications:
  - provider: Slack
    incoming_webhook:
      # post to the fire channel
      secure: KUaR+KAqX1jU0LF7kRDKHHGEAoItFzIHSjcreyRvnrRGMiSObCLPipW6KJUwvpl7CEWa8PP2LPzgiQssPcUWLCzoIVY+NvucTI+1NJ0H7GM=
    on_build_success: false


test_script:
  - echo Skipping doomed test discovery to save time